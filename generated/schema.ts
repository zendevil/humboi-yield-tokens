// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Raise extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Raise entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Raise entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Raise", id.toString(), this);
  }

  static load(id: string): Raise | null {
    return store.get("Raise", id) as Raise | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (value === null) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(value as string));
    }
  }

  get percentage(): BigInt | null {
    let value = this.get("percentage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set percentage(value: BigInt | null) {
    if (value === null) {
      this.unset("percentage");
    } else {
      this.set("percentage", Value.fromBigInt(value as BigInt));
    }
  }

  get minToRaise(): BigInt | null {
    let value = this.get("minToRaise");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minToRaise(value: BigInt | null) {
    if (value === null) {
      this.unset("minToRaise");
    } else {
      this.set("minToRaise", Value.fromBigInt(value as BigInt));
    }
  }

  get bidStart(): BigInt | null {
    let value = this.get("bidStart");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidStart(value: BigInt | null) {
    if (value === null) {
      this.unset("bidStart");
    } else {
      this.set("bidStart", Value.fromBigInt(value as BigInt));
    }
  }

  get bidEnd(): BigInt | null {
    let value = this.get("bidEnd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidEnd(value: BigInt | null) {
    if (value === null) {
      this.unset("bidEnd");
    } else {
      this.set("bidEnd", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentsStart(): BigInt | null {
    let value = this.get("paymentsStart");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentsStart(value: BigInt | null) {
    if (value === null) {
      this.unset("paymentsStart");
    } else {
      this.set("paymentsStart", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentsEnd(): BigInt | null {
    let value = this.get("paymentsEnd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentsEnd(value: BigInt | null) {
    if (value === null) {
      this.unset("paymentsEnd");
    } else {
      this.set("paymentsEnd", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentsInterval(): BigInt | null {
    let value = this.get("paymentsInterval");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentsInterval(value: BigInt | null) {
    if (value === null) {
      this.unset("paymentsInterval");
    } else {
      this.set("paymentsInterval", Value.fromBigInt(value as BigInt));
    }
  }
}
