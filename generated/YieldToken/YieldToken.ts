// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Created extends ethereum.Event {
  get params(): Created__Params {
    return new Created__Params(this);
  }
}

export class Created__Params {
  _event: Created;

  constructor(event: Created) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tokenURI(): string {
    return this._event.parameters[1].value.toString();
  }

  get _percentage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _minToRaise(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _bidStart(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _bidEnd(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _paymentsStart(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get _paymentsEnd(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get _paymentsInterval(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Payout extends ethereum.Event {
  get params(): Payout__Params {
    return new Payout__Params(this);
  }
}

export class Payout__Params {
  _event: Payout;

  constructor(event: Payout) {
    this._event = event;
  }

  get stakeholder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensIssued extends ethereum.Event {
  get params(): TokensIssued__Params {
    return new TokensIssued__Params(this);
  }
}

export class TokensIssued__Params {
  _event: TokensIssued;

  constructor(event: TokensIssued) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensToMint(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class YieldToken extends ethereum.SmartContract {
  static bind(address: Address): YieldToken {
    return new YieldToken("YieldToken", address);
  }

  bidEnd(): BigInt {
    let result = super.call("bidEnd", "bidEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidEnd", "bidEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidStart(): BigInt {
    let result = super.call("bidStart", "bidStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidStart", "bidStart():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minToRaise(): BigInt {
    let result = super.call("minToRaise", "minToRaise():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minToRaise(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minToRaise", "minToRaise():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentsEnd(): BigInt {
    let result = super.call("paymentsEnd", "paymentsEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paymentsEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paymentsEnd", "paymentsEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentsInterval(): BigInt {
    let result = super.call(
      "paymentsInterval",
      "paymentsInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentsInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentsInterval",
      "paymentsInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentsStart(): BigInt {
    let result = super.call("paymentsStart", "paymentsStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paymentsStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentsStart",
      "paymentsStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  percentage(): BigInt {
    let result = super.call("percentage", "percentage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("percentage", "percentage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTokensMinted(): BigInt {
    let result = super.call(
      "totalTokensMinted",
      "totalTokensMinted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalTokensMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokensMinted",
      "totalTokensMinted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listContains(list: Array<Address>, to: Address): boolean {
    let result = super.call(
      "listContains",
      "listContains(address[],address):(bool)",
      [ethereum.Value.fromAddressArray(list), ethereum.Value.fromAddress(to)]
    );

    return result[0].toBoolean();
  }

  try_listContains(
    list: Array<Address>,
    to: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "listContains",
      "listContains(address[],address):(bool)",
      [ethereum.Value.fromAddressArray(list), ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalAmountRaised(): BigInt {
    let result = super.call(
      "totalAmountRaised",
      "totalAmountRaised():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAmountRaised(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAmountRaised",
      "totalAmountRaised():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _percentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minToRaise(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _bidStart(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _bidEnd(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _paymentsStart(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _paymentsEnd(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _paymentsInterval(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class BuyStakeCall extends ethereum.Call {
  get inputs(): BuyStakeCall__Inputs {
    return new BuyStakeCall__Inputs(this);
  }

  get outputs(): BuyStakeCall__Outputs {
    return new BuyStakeCall__Outputs(this);
  }
}

export class BuyStakeCall__Inputs {
  _call: BuyStakeCall;

  constructor(call: BuyStakeCall) {
    this._call = call;
  }
}

export class BuyStakeCall__Outputs {
  _call: BuyStakeCall;

  constructor(call: BuyStakeCall) {
    this._call = call;
  }
}

export class GiveupStakeCall extends ethereum.Call {
  get inputs(): GiveupStakeCall__Inputs {
    return new GiveupStakeCall__Inputs(this);
  }

  get outputs(): GiveupStakeCall__Outputs {
    return new GiveupStakeCall__Outputs(this);
  }
}

export class GiveupStakeCall__Inputs {
  _call: GiveupStakeCall;

  constructor(call: GiveupStakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GiveupStakeCall__Outputs {
  _call: GiveupStakeCall;

  constructor(call: GiveupStakeCall) {
    this._call = call;
  }
}

export class IssueTokensCall extends ethereum.Call {
  get inputs(): IssueTokensCall__Inputs {
    return new IssueTokensCall__Inputs(this);
  }

  get outputs(): IssueTokensCall__Outputs {
    return new IssueTokensCall__Outputs(this);
  }
}

export class IssueTokensCall__Inputs {
  _call: IssueTokensCall;

  constructor(call: IssueTokensCall) {
    this._call = call;
  }
}

export class IssueTokensCall__Outputs {
  _call: IssueTokensCall;

  constructor(call: IssueTokensCall) {
    this._call = call;
  }
}

export class PayoutCall extends ethereum.Call {
  get inputs(): PayoutCall__Inputs {
    return new PayoutCall__Inputs(this);
  }

  get outputs(): PayoutCall__Outputs {
    return new PayoutCall__Outputs(this);
  }
}

export class PayoutCall__Inputs {
  _call: PayoutCall;

  constructor(call: PayoutCall) {
    this._call = call;
  }
}

export class PayoutCall__Outputs {
  _call: PayoutCall;

  constructor(call: PayoutCall) {
    this._call = call;
  }
}
